#########################################################

$ echo Hello, Linux!

$ echo 'Hello, Linux!' 'Here I am!'

$ echo -e 'Hello, Linux! \nHere I am!'
Hello, Linux!
Here I am!

#########################################################
# Пишим в файл с затиранием
$ echo '#!/usr/bin/env bash' > hello_world.sh

# Пишим в файл с добавлением
$ echo 'Hello, world!' >> hello_world.sh

#########################################################

Run a shell script

bash hello_world.sh.
or
chmod +x hello_world.sh

#########################################################

Arguments

The null parameter $0 is always the name of the script
The $# variable denotes the total number of the parameters

#!/usr/bin/env bash

echo "You provided $# facts about yourself!"
echo "Your name is $1"
echo "Your age is $2"

#########################################################

group all the parameters passed to the script. To do this, you can use the $* and $@ variables

$* variable contains all the parameters entered on the command line as a single "word", everything you pass will be collapsed into a single variable

$@ variable, the parameters are split into separate "words". There will be a separate position for each parameter

#!/usr/bin/env bash

echo "You provided $# facts about yourself!"
echo "Your name is $1"
echo "Your age is ${2}"

echo "$* - one word all params"
echo "$@ - several words all params"

$ bash personal_data.sh Max 42 one word all params
You provided 6 facts about yourself!
Your name is Max
Your age is 42
Max 42 one word all params - one word all params
Max 42 one word all params - several words all params

#########################################################

Functions

#set
function function_name {} 

or 

function_name() {}

#!/usr/bin/env bash

personal_data() {
    echo "You provided $# facts about yourself!"
    echo "Your name is $1"
    echo "Your age is $2"
}
personal_data "Amy" 26 (это внутри файла!!!)

#########################################################

$ bash personal_data.sh
You provided 2 facts about yourself!
Your name is Amy
Your age is 26

#########################################################

Help files

$ man ls
or
3 ways:
$ sudo npm install -g tldr
$ sudo snap install tldr
$ sudo apt install tldr
or
$ whatis ls

#########################################################

Basic if-statement

if [conditions]; then
   commands
fi

If the return status of the test commands is 0 (success), the commands inside the if-block get executed and if the status is non-zero (failure), the commands are skipped.

#########################################################

Test command and its options

test expression
or
[ expression ]

The test command returns a value of 0 when the expression is true and a value of 1 when the expression is false.

#########################################################

# Checking the password entered by user

echo "Enter password: "
read input
if [ $input = "Pass!@#" ]; then
    echo "Correct password entered"
fi

#########################################################

The else block

if [ $input = "Pass!@#" ]; then
    echo "Correct password entered"
else
    echo "Incorrect password entered"
fi

#########################################################

The elif block

num1=20;
num2=10;

if [ "$num1" -eq "$num2" ]; then
    echo "Numbers are equal"
elif [ "$num1" -gt "$num2" ]; then
    echo "First number is greater"
else
    echo "Second number is greater"
fi

if test-commands; then
    consequent-commands
elif more-test-commands; then
    more-consequents
else
    some-more-consequents
fi


#########################################################

Variables and aliases

$ echo $HOME
/home/<user name>

#########################################################

A subset of shell variables exported to any new shell from the current one is called environment variables. You can convert any variable to an environment variable by using the export command

export VARIABLE

#########################################################

the list of shell variables

set | less
printenv | less

#########################################################

Creating variables

$ MY_VARIABLE="some value"
$ echo $MY_VARIABLE
some value

To unset the value use unset without the $ sign
$ unset MY_VARIABLE

#########################################################

Variables created this way in the shell will be available only in the current shell. 
You can save them to one of the start-up files like /etc/profile or ~/.bashrc 
or 
~/.bash_profile
so you can use them every time you start the shell.


#########################################################

PATH of programs

$ echo $PATH

PATH=/home/hagrid/.local/bin: /bin: /usr/bin: /usr/local/bin: /sbin: /usr/sbin: /usr/local/sbin

You can add a directory with your programs to the PATH and then export variable to the environment like this:

PATH=$PATH:/path-to-your-directory
export PATH

#########################################################

Aliases

Aliases are synonyms or shortcuts for commands that you can define for your convenience.

alias name-of-alias='command'
Be aware, there shouldn't be any white spaces around the = sign.

alias rm="rm -i"

To watch all predefined and set by you aliases on your system type alias without arguments

To remove an alias from the environment, use the unalias command:

unalias rm

#########################################################





#########################################################






#########################################################